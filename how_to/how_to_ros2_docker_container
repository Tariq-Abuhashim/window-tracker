
# this file explains how to:
(1) Create a docker container with cuda, tensorrt, ros2
(2) Run the container, play a ros2 bag of images in it
(2) Run a second container, subscribe to the image message in it


# In <1st terminal>, move to directory and build image container
cd /home/mrt/dev/mission-systems/detr/docker/example-with-trt10/
docker build -t ros2-foxy-tensorrt-container .

# In <1st terminal>, verify the Bag File Path
ls /media/mrt/Whale/data/mission-systems/30-05-24/Camera_Bags/rosbag2_2024_05_30-01_47_17/rosbag2_2024_05_30-01_47_17_0.db3

# In <1st terminal>, map the Directory Correctly and run the container
docker run --gpus all -it --rm --name ros2_container \
  -v /media/mrt/Whale/data/mission-systems/30-05-24/Camera_Bags:/workspace/bags \
  -v /media/mrt/Whale/data/mission-systems/30-05-24/Camera_Bags/rosbag2_2024_05_30-01_47_17/images/:/workspace/images \
  -e ROSBAG_PATH=/workspace/bags/rosbag2_2024_05_30-01_47_17/rosbag2_2024_05_30-01_47_17_0.db3 \
  ros2-foxy-tensorrt-container

# In <2nd terminal>, run the second container
docker exec -it ros2_container bash

# In <1st terminal>, play the rosbag inside the container
ros2 bag play $ROSBAG_PATH


# In <2nd terminal>, Run the Image Saver Script
nano
<copy and paste the code bellow, save as save_images.py>
python3 save_images.py /arena_camera_node/images /workspace/images



**********************
*** save_images.py ***
**********************
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import sys

class ImageSaver(Node):
    def __init__(self, image_topic, output_dir):
        super().__init__('image_saver')
        self.subscription = self.create_subscription(
            Image,
            image_topic,
            self.listener_callback,
            10)
        self.bridge = CvBridge()
        self.image_count = 0
        self.output_dir = output_dir

    def listener_callback(self, msg):
        self.image_count += 1
        cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='BGR8')
        image_path = f'{self.output_dir}/image_{self.image_count:04d}.png'
        cv2.imwrite(image_path, cv_image)
        self.get_logger().info(f'Saved image {image_path}')

def main(args=None):
    rclpy.init(args=args)
    if len(sys.argv) < 3:
        print("Usage: save_images.py <image_topic> <output_dir>")
        return
    image_topic = sys.argv[1]
    output_dir = sys.argv[2]
    image_saver = ImageSaver(image_topic, output_dir)
    rclpy.spin(image_saver)
    image_saver.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()


